ü§ñ EduBot2 ‚Äì Robot Mobile Autonome (Webots & ROS 2)

Ce projet met en ≈ìuvre un robot diff√©rentiel autonome appel√© EduBot2, d√©velopp√© dans le cadre d‚Äôun projet de fin d‚Äô√©tudes. Il inclut une simulation sous Webots ainsi qu‚Äôun d√©ploiement r√©el avec ROS 2 (Humble), le tout avec SLAM, navigation autonome, t√©l√©op√©ration via manette, et contr√¥le moteur via Modbus TCP.

Liste des packages et explication :
-----------------------------------------------------------------------------------------------------------------------------------------------------
üì¶ edubot_bringup

Ce package regroupe les n≈ìuds ROS 2 utilis√©s sur le robot r√©el.
üß† N≈ìuds

    diff_driver.py
    G√®re la communication avec les moteurs via Modbus TCP/IP.
    Publie l'odom√©trie (/odom) et √©coute les commandes de vitesse (/cmd_vel).
    Diffuse √©galement les TF odom ‚Üí base_footprint.

    joy_driver.py
    Lit les commandes de la manette et publie un Twist sur /cmd_vel.

    scan_filter.py
    Filtre les donn√©es du LiDAR (RPLidar) pour ne garder que les 180¬∞ √† l'avant du robot.
    Publie sur /scan_filtered pour √™tre utilis√© par SLAM et la navigation.

üöÄ launch

ros2 launch edubot_bringup edubot_control.launch.py    	--> controle du robot

ros2 launch edubot_bringup edubot_navigation.launch.py	--> nav2 avec map preexistante

ros2 launch edubot_bringup edubot_slam.launch.py	--> slam (contruction de la map)
----------------------------------------------------------------------------------------------------------------------------------------------------

üì¶ edubot_webots

Ce package permet de simuler le robot EduBot2 sous Webots avec ROS 2.
üß† N≈ìud principal

    cmd_vel_listener.py
    Contr√¥le le robot EduBot2 dans Webots en √©coutant /cmd_vel,
    publie /odom, les TFs, /scan, et /clock (utilis√© pour SLAM Toolbox en simulation).
    L‚Äôodom√©trie est calcul√©e √† partir des capteurs de position (encodeurs des roues).

üöÄ launch disponibles


ros2 launch edubot_webots edubot_slam.launch.py		--> slam (contruction de la map)

ros2 launch edubot_webots edubot_navigation.launch.py  	--> nav2 avec map preexistante

ros2 launch edubot_webots edubot_control.launch.py	--> controle du robot avec manette PS4

ros2 launch edubot_webots edubotkey_launch.py		--> controle du robot avec clavier
                  
ros2 launch edubot_webots edubotps3joy_launch.py 	--> controle du robot avec manette PS3

------------------------------------------------------------------------------------------------------------------------------------------------------

üó∫Ô∏è Enregistrement de la carte (robot r√©el)

Apr√®s exploration avec le SLAM Toolbox :

ros2 run nav2_map_server map_saver_cli -f ~/edubot_ws/src/nav2/maps/map_name

-------------------------------------------------------------------------------------------------------------------------------------------------------

üì¶ rplidar_ros (pour faire fonctionner le LiDAR)

la commande pour lancer notre rpLiDAR A2M8 est :
	
ros2 launch rplidar_ros rplidar_a2m8_launch.py inverted:=True



pkill -f robot_state_publisher
NB : suivre la documentation pour installer le package si necessaire (pas besoin car je l'ai deja ajouter dans notre workspace).
     
lien vers documentation : https://docs.ros.org/en/humble/p/rplidar_ros/index.html
